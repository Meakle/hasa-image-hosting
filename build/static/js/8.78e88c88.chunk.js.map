{"version":3,"sources":["components/ResultLink.jsx","components/List.jsx","pages/History.jsx"],"names":["ResultLink","observer","props","Img","styled","img","Wrapper","div","Container","StyleInput","Input","serverFileUrl","url","console","log","ref","refURL","useRef","refHTML","copyLink","method","copy","current","state","value","message","success","href","target","rel","src","alt","title","okText","cancelText","onConfirm","type","handleMarkdown","historyList","HistoryStore","useStores","List","Item","useEffect","reset","initialLoad","pageStart","loadMore","find","hasMore","isLoading","useWindow","list","map","item","attributes","thp","id","History","fade","keyframes"],"mappings":"qNAOMA,EAAaC,aAAS,SAACC,GAGzB,IAAMC,EAAMC,IAAOC,IAAV,sEAAGD,CAAH,uFAMHE,EAAUF,IAAOG,IAAV,0EAAGH,CAAH,mFAOPI,EAAYJ,IAAOG,IAAV,4EAAGH,CAAH,2FAOTK,EAAaL,YAAOM,KAAV,6EAAGN,CAAH,kBAGVO,EAAgBT,EAAMU,IAE5BC,QAAQC,IAAIZ,GAEZ,IAkBoBa,EAlBdC,EAASC,iBAAO,MAChBC,EAAUD,iBAAO,MAEjBE,EAAW,SAACJ,EAAKK,GACnB,OAAO,WACY,QAAXA,GACAC,IAAKN,EAAIO,QAAQC,MAAMC,OACvBC,IAAQC,QAAQ,8BACE,SAAXN,GACPC,IAAK,aAAD,OAAcN,EAAIO,QAAQC,MAAMC,MAAhC,eACJC,IAAQC,QAAQ,8BACE,aAAXN,IACPC,IAAK,OAAD,OAAQN,EAAIO,QAAQC,MAAMC,MAA1B,MACJC,IAAQC,QAAQ,gCAa5B,OACI,8BACI,cAACpB,EAAD,UACI,eAACE,EAAD,WACI,gCACI,0DACA,mBAAGmB,KAAMhB,EAAeiB,OAAO,SAASC,IAAI,aAA5C,SAAyD,cAAC1B,EAAD,CAAK2B,IAAKnB,EAAeoB,IAAI,UAE1F,gCACI,0DAEA,+BACI,+BACI,6BACI,cAAC,IAAD,CAAYC,MAAM,2EAAeC,OAAO,SAAIC,WAAW,SAAIC,UAAWhB,EAASH,EAAQ,OAAvF,SACI,uEAGR,cAACP,EAAD,CAAY2B,KAAK,OAAOZ,MAAOb,EAAeI,IAAKC,OAGvD,+BACI,6BACI,cAAC,IAAD,CAAYgB,MAAM,2EAAeC,OAAO,SAAIC,WAAW,SAAIC,UAAWhB,EAASH,EAAQ,QAAvF,SACI,wEAGR,cAACP,EAAD,CAAY2B,KAAK,OAAOZ,OAnChCT,EAmCkDJ,EAlC5D,aAAN,OAAoBI,EAApB,eAkCkFA,IAAKG,OAGnE,+BACI,6BACI,cAAC,IAAD,CAAYc,MAAM,2EAAeC,OAAO,SAAIC,WAAW,SAAIC,UAAWhB,EAASH,EAAQ,QAAvF,SACI,4EAGR,cAACP,EAAD,CAAY2B,KAAK,OAAOZ,MAxC7B,SAACT,GACpB,MAAM,OAAN,OAAcA,EAAd,KAuCuDsB,CAAe1B,wBAY/DX,O,yKCrDAsC,EAjDKrC,aAAS,WAAO,IAExBsC,EAAiBC,cAAjBD,aAMWnC,YAAOqC,IAAKC,MAAf,mEAAGtC,CAAH,gDAYhB,OAPAuC,qBAAU,WAEN,OADA9B,QAAQC,IAAI,gBACL,WACHyB,EAAaK,WAElB,IAGC,mCACI,cAAC,IAAD,CACIC,aAAa,EACbC,UAAW,EACXC,SArBK,WACbR,EAAaS,QAqBLC,SAAUV,EAAaW,WAAaX,EAAaU,QACjDE,WAAW,EALf,SAOI,6BAEQZ,EAAaa,KAAKC,KAAI,SAACC,GACnB,OAAO,+BACH,cAACtD,EAAA,EAAD,CAAYY,IAAK0C,EAAKC,WAAW3C,IAAI2C,WAAW3C,MAC/C2B,EAAaW,WAAaX,EAAaU,SACpC,8BACI,cAAC,IAAD,CAAMO,IAAI,8BAJNF,EAAKG,gBCrClC,SAASC,IAGpB,IAAMC,EAAOC,YAAH,yFAWJF,EAAUtD,IAAOG,IAAV,8DAAGH,CAAH,+BACIuD,GAGjB,OACI,eAACD,EAAD,WACI,0DACA,cAACjB,EAAD","file":"static/js/8.78e88c88.chunk.js","sourcesContent":["import React, { useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport styled from 'styled-components'\nimport { Input, Popconfirm, message } from 'antd';\nimport copy from 'copy-to-clipboard';\n\n// 呜呜呜终于实现了一个组件的复用了\nconst ResultLink = observer((props) => {\n\n    // css in js\n    const Img = styled.img`\n        margin-top: 20px;\n        max-width: 200px;\n        max-height: 200px;\n        box-shadow: 3px 3px 10px #d9d9d9;\n    `\n    const Wrapper = styled.div`\n        margin-top: 20px;\n        padding: 50px;\n        background-color: #fff;\n        border: 1px dashed #d9d9d9;\n    `\n\n    const Container = styled.div`\n        display: flex !important;\n        flex-wrap: wrap;\n        margin-top: 30px;\n        justify-content: space-between;\n    `\n\n    const StyleInput = styled(Input)`\n        width: 550px;\n    `\n    const serverFileUrl = props.url;\n\n    console.log(props);\n\n    const refURL = useRef(null);\n    const refHTML = useRef(null);\n\n    const copyLink = (ref, method) => {\n        return () => {\n            if (method === 'URL') {\n                copy(ref.current.state.value);\n                message.success('拷贝成功!');\n            } else if (method === 'HTML') {\n                copy(`<img src=\"${ref.current.state.value}\" alt=\"\"/>`);\n                message.success('拷贝成功!');\n            } else if (method === 'Markdown') {\n                copy(`![](${ref.current.state.value})`);\n                message.success('拷贝成功!');\n            }\n        }\n    }\n\n    const handleHTML = (ref) => {\n        return `<img src=\"${ref}\" alt=\"\"/>`\n    }\n\n    const handleMarkdown = (ref) => {\n        return `![](${ref})`;\n    }\n\n    return (\n        <div>\n            <Wrapper>\n                <Container>\n                    <div>\n                        <h3>预览图片</h3>\n                        <a href={serverFileUrl} target=\"_blank\" rel=\"noreferrer\"><Img src={serverFileUrl} alt=\"\" /></a>\n                    </div>\n                    <div>\n                        <h3>结果链接</h3>\n\n                        <ul>\n                            <li>\n                                <h4>\n                                    <Popconfirm title=\"是否要复制内容到剪贴板？\" okText=\"是\" cancelText=\"否\" onConfirm={copyLink(refURL, \"URL\")}>\n                                        <a>👉&nbsp;URL(复制):</a>\n                                    </Popconfirm>\n                                </h4>\n                                <StyleInput type=\"text\" value={serverFileUrl} ref={refURL} />\n                            </li>\n\n                            <li>\n                                <h4>\n                                    <Popconfirm title=\"是否要复制内容到剪贴板？\" okText=\"是\" cancelText=\"否\" onConfirm={copyLink(refURL, \"HTML\")}>\n                                        <a>👉&nbsp;HTML(复制):</a>\n                                    </Popconfirm>\n                                </h4>\n                                <StyleInput type=\"text\" value={handleHTML(serverFileUrl)} ref={refHTML} />\n                            </li>\n\n                            <li>\n                                <h4>\n                                    <Popconfirm title=\"是否要复制内容到剪贴板？\" okText=\"是\" cancelText=\"否\" onConfirm={copyLink(refURL, \"HTML\")}>\n                                        <a>👉&nbsp;Markdown(复制):</a>\n                                    </Popconfirm>\n                                </h4>\n                                <StyleInput type=\"text\" value={handleMarkdown(serverFileUrl)} />\n                            </li>\n                        </ul>\n                    </div>\n                </Container>\n\n\n            </Wrapper>\n        </div>\n    )\n})\n\nexport default ResultLink;","import React, { useEffect } from 'react'\nimport { observer } from 'mobx-react'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { List, Spin } from 'antd'\nimport styled from 'styled-components'\nimport ResultLink from './ResultLink'\n\nimport { useStores } from '../stores'\n\nconst historyList = observer(() => {\n\n    const { HistoryStore } = useStores();\n\n    const loadMore = () => {\n        HistoryStore.find();\n    }\n\n    const MyListItem = styled(List.Item)`\n        border-top: 1px solid #ddd;\n        text-align: left;\n    `\n\n    useEffect(() => {\n        console.log('进入')\n        return () => {\n            HistoryStore.reset();\n        };\n    }, []);\n\n    return (\n        <>\n            <InfiniteScroll\n                initialLoad={true}\n                pageStart={0}\n                loadMore={loadMore}\n                hasMore={!HistoryStore.isLoading && HistoryStore.hasMore}\n                useWindow={true}\n            >\n                <ul>\n                    {\n                        HistoryStore.list.map((item) => {\n                            return <li key={item.id}>\n                                <ResultLink url={item.attributes.url.attributes.url} />\n                                {HistoryStore.isLoading && HistoryStore.hasMore && (\n                                    <div>\n                                        <Spin thp=\"加载中...\" />\n                                    </div>\n                                )}\n                            </li>\n                        })\n                    }\n                </ul>\n                \n            </InfiniteScroll>\n        </>\n    )\n})\n\nexport default historyList;","import React from 'react'\nimport List from '../components/List'\nimport styled, {keyframes} from 'styled-components'\n\nexport default function History() {\n\n    // 淡入动画效果, styled-components 暴露出的API\n    const fade = keyframes`\n    from {\n        opacity: 0;\n        transform: translateY(40px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0px);\n    }\n    `\n\n    const History = styled.div`\n        animation: ${fade} 1500ms ease;\n    `\n\n    return (\n        <History>\n            <h1>上传历史</h1>\n            <List />\n        </History>\n    )\n}\n"],"sourceRoot":""}